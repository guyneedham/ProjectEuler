package com.gn.multiplesOf3and5

import scala.annotation.tailrec


object testREPL {
 val window = 4                                   //> window  : Int = 4
 val inputGrid = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 "+
								 "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 "+
								 "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 "+
								 "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 "+
								 "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 "+
								 "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 "+
								 "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 "+
								 "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 "+
								 "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 "+
								 "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 "+
								 "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 "+
								 "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 "+
								 "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 "+
								 "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 "+
								 "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 "+
								 "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 "+
								 "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 "+
								 "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 "+
								 "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 "+
								 "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48 "
                                                  //> inputGrid  : String = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 7
                                                  //| 7 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 3
                                                  //| 1 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 4
                                                  //| 2 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 2
                                                  //| 2 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 1
                                                  //| 7 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 2
                                                  //| 0 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 2
                                                  //| 6 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 0
                                                  //| 0 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 5
                                                  //| 3 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 0
                                                  //| 0 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 6
                                                  //| 9 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 1
                                                  //| 6 26 26 79 33 27 98 66 
                                                  //| Output exceeds cutoff limit.
 		
 val inputInts = inputGrid.split("\\s").map(_.toInt)
                                                  //> inputInts  : Array[Int] = Array(8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7
                                                  //| , 78, 52, 12, 50, 77, 91, 8, 49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40
                                                  //| , 98, 43, 69, 48, 4, 56, 62, 0, 81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40,
                                                  //|  67, 53, 88, 30, 3, 49, 13, 36, 65, 52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 
                                                  //| 68, 56, 1, 32, 56, 71, 37, 2, 36, 91, 22, 31, 16, 71, 51, 67, 63, 89, 41, 9
                                                  //| 2, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80, 24, 47, 32, 60, 99, 3, 45, 2, 44
                                                  //| , 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50, 32, 98, 81, 28, 64, 23, 67, 1
                                                  //| 0, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70, 67, 26, 20, 68, 2, 62, 1
                                                  //| 2, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21, 24, 55, 58, 5, 66, 73
                                                  //| , 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72, 21, 36, 23, 9, 75
                                                  //| , 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95, 78, 17, 53, 28,
                                                  //|  22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92, 16, 39, 5, 42
                                                  //| , 96, 35, 31, 47, 55, 5
                                                  //| Output exceeds cutoff limit.
 // find horizontal runs
 //have to split into lines of 20
 val lineLength = 20                              //> lineLength  : Int = 20
 val lines = inputInts.grouped(lineLength).toList //> lines  : List[Array[Int]] = List(Array(8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 
                                                  //| 4, 5, 7, 78, 52, 12, 50, 77, 91, 8), Array(49, 49, 99, 40, 17, 81, 18, 57, 
                                                  //| 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0), Array(81, 49, 31, 73, 55, 79
                                                  //| , 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65), Array(52, 70, 95,
                                                  //|  23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91), Array(22
                                                  //| , 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 8
                                                  //| 0), Array(24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35,
                                                  //|  17, 12, 50), Array(32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54,
                                                  //|  70, 66, 18, 38, 64, 70), Array(67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 
                                                  //| 39, 63, 8, 40, 91, 66, 49, 94, 21), Array(24, 55, 58, 5, 66, 73, 99, 26, 97
                                                  //| , 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72), Array(21, 36, 23, 9, 75, 0, 
                                                  //| 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95), Array(78, 17, 53, 2
                                                  //| 8, 22, 75, 31, 67, 15, 
                                                  //| Output exceeds cutoff limit.
 val matrix = Array.ofDim[Int](2,2)               //> matrix  : Array[Array[Int]] = Array(Array(0, 0), Array(0, 0))
 matrix(0)(0) = 0
 matrix(0)(1) = 1
 matrix(1)(0) = 2
 matrix(1)(1) = 3
 matrix                                           //> res0: Array[Array[Int]] = Array(Array(0, 1), Array(2, 3))
 matrix(0) = Array(0,1)
 matrix                                           //> res1: Array[Array[Int]] = Array(Array(0, 1), Array(2, 3))
 matrix.map{_(0)}                                 //> res2: Array[Int] = Array(0, 2)
 val i = matrix(0).size                           //> i  : Int = 2
 if (matrix(0).size == 2){
     println("found")
 }                                                //> found
 def makeMatrix(rows: List[Array[Int]]): Array[Array[Int]] = {
 
 		val nrows = rows.size
 		val ncols = rows(0).size
 		
 		var matrix = Array.ofDim[Int](nrows, ncols)
 		/*rows.map{ case row: Array[Int] =>
 			if (row.size == ncols) {
 				matrix :+ row
 			} else {
 				throw new ArrayIndexOutOfBoundsException
 			}
 		 }
 		 matrix
    */
    @tailrec
 		def matrixMake(i: Int, rows: List[Array[Int]], matrix: Array[Array[Int]]): Array[Array[Int]] = rows match {
 		
 		  case Nil     => matrix
 		
 			case x :: xs => matrix(i) = x
 											matrixMake(i+1, xs, matrix)
 											
 		}
 
    matrixMake(0, rows, matrix)
 }                                                //> makeMatrix: (rows: List[Array[Int]])Array[Array[Int]]
 
 def getColumn(index: Int): Array[Int] = matrix.map{_(index)}
                                                  //> getColumn: (index: Int)Array[Int]
 makeMatrix(List(Array(1,2,3),Array(4,5,6),Array(7,8,9)))
                                                  //> res3: Array[Array[Int]] = Array(Array(1, 2, 3), Array(4, 5, 6), Array(7, 8,
                                                  //|  9))
 
 
 
 class Matrix(val rows: List[Array[Int]]) {
 		val nrows = rows.size
 	  val ncols = rows(0).size
    val matrix = makeMatrix(rows)
 
    val dims = (nrows, ncols)
 
 		private def makeMatrix(rows: List[Array[Int]]): Array[Array[Int]] = {
 
 			var matrix = Array.ofDim[Int](nrows, ncols)
      @tailrec
 			def matrixMake(i: Int, rows: List[Array[Int]], matrix: Array[Array[Int]]): Array[Array[Int]] = rows match {
 		
 		  	case Nil     => matrix
 		
 				case x :: xs => matrix(i) = x
 											  matrixMake(i+1, xs, matrix)
 											
 			}
 
     	matrixMake(0, rows, matrix)
 		}
 	
 		def getColumn(index: Int): List[Int] = matrix.map{_(index)}.toList
 		def getRow(index: Int): List[Int] = matrix(index).toList
 		def getDiagonal(i: Int, j: Int): (List[Int], List[(Int, Int)]) = {
 			val res = List[Int]()
 			val vis = List[(Int, Int)]()
 			@tailrec
 			def inner(i: Int, j: Int, visited: List[(Int, Int)], res: List[Int]): (List[Int], List[(Int, Int)]) = {
 				if(i < nrows & j < ncols) {
 					val r1 = matrix(i)(j) +: res
 					val v1 = (i,j) +: visited
 					
 					inner(i+1, j+1, v1, r1)
 				} else {
 				  (res,visited)
 				}
 			}
 			val visited = inner(i, j, vis, res)
 			visited
 		}
 		
 		def getReflection: Matrix = {
 		
 			val rows = for{i <- (0 until nrows).toList } yield getRow(i).reverse.toArray
 			new Matrix(rows)
 		
 		}
 		
 		def diagonalScan: List[List[Int]] = {
 			val startingPoints = getAllCoords
 			val diags = List[List[Int]]()
 			
 			def inner(startingPoints: List[(Int, Int)], diags: List[List[Int]]): List[List[Int]] = startingPoints match {
 			
 				case Nil => diags
 				case (i, j) :: xs => {
 													val (search, searched) = getDiagonal(i,j)
 													val toSearch = xs filterNot(searched.contains(_))
 													val found = search +: diags
 													inner(toSearch, found)
 												}
 			
 			}
 			
 			inner(startingPoints, diags)
 		
 		}
 		
 		def getAllCoords: List[(Int, Int)] = {
 			for ( x <- (0 until nrows).toList; y <- (0 until ncols).toList ) yield (x,y)
 		}
 		
 		def getAllColumns: List[List[Int]] = {
 			for ( y <- (0 until ncols).toList) yield getColumn(y)
 		}
 		
 		def getAllRows: List[List[Int]] = {
 			for ( x <- (0 until nrows).toList) yield getRow(x)
 		}
 
 }
 
 val mat = new Matrix(lines)                      //> mat  : com.gn.multiplesOf3and5.testREPL.Matrix = com.gn.multiplesOf3and5.te
                                                  //| stREPL$$anonfun$main$1$Matrix$1@1b604f19
 mat.matrix                                       //> res4: Array[Array[Int]] = Array(Array(8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4
                                                  //| , 5, 7, 78, 52, 12, 50, 77, 91, 8), Array(49, 49, 99, 40, 17, 81, 18, 57, 6
                                                  //| 0, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0), Array(81, 49, 31, 73, 55, 79,
                                                  //|  14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65), Array(52, 70, 95, 
                                                  //| 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91), Array(22,
                                                  //|  31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80
                                                  //| ), Array(24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 
                                                  //| 17, 12, 50), Array(32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 
                                                  //| 70, 66, 18, 38, 64, 70), Array(67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 3
                                                  //| 9, 63, 8, 40, 91, 66, 49, 94, 21), Array(24, 55, 58, 5, 66, 73, 99, 26, 97,
                                                  //|  17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72), Array(21, 36, 23, 9, 75, 0, 7
                                                  //| 6, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95), Array(78, 17, 53, 28
                                                  //| , 22, 75, 31, 67, 15, 9
                                                  //| Output exceeds cutoff limit.
 mat.getReflection.matrix                         //> res5: Array[Array[Int]] = Array(Array(8, 91, 77, 50, 12, 52, 78, 7, 5, 4, 7
                                                  //| 5, 0, 40, 0, 15, 38, 97, 22, 2, 8), Array(0, 62, 56, 4, 48, 69, 43, 98, 40,
                                                  //|  17, 87, 60, 57, 18, 81, 17, 40, 99, 49, 49), Array(65, 36, 13, 49, 3, 30, 
                                                  //| 88, 53, 67, 40, 71, 93, 29, 14, 79, 55, 73, 31, 49, 81), Array(91, 36, 2, 3
                                                  //| 7, 71, 56, 32, 1, 56, 68, 24, 69, 42, 11, 60, 4, 23, 95, 70, 52), Array(80,
                                                  //|  13, 33, 66, 28, 40, 40, 22, 54, 36, 92, 41, 89, 63, 67, 51, 71, 16, 31, 22
                                                  //| ), Array(50, 12, 17, 35, 20, 84, 36, 78, 53, 33, 75, 44, 2, 45, 3, 99, 60, 
                                                  //| 32, 47, 24), Array(70, 64, 38, 18, 66, 70, 54, 59, 67, 40, 38, 26, 10, 67, 
                                                  //| 23, 64, 28, 81, 98, 32), Array(21, 94, 49, 66, 91, 40, 8, 63, 39, 94, 63, 9
                                                  //| 5, 20, 12, 62, 2, 68, 20, 26, 67), Array(72, 63, 89, 34, 88, 14, 83, 96, 78
                                                  //| , 78, 17, 97, 26, 99, 73, 66, 5, 58, 55, 24), Array(95, 33, 31, 34, 97, 33,
                                                  //|  61, 0, 14, 35, 45, 20, 44, 76, 0, 75, 9, 23, 36, 21), Array(92, 56, 53, 9,
                                                  //|  14, 16, 62, 4, 80, 3, 
                                                  //| Output exceeds cutoff limit.
 
 mat.getDiagonal(0,0)                             //> res6: (List[Int], List[(Int, Int)]) = (List(48, 5, 4, 40, 32, 26, 52, 44, 2
                                                  //| 4, 3, 45, 97, 20, 67, 3, 51, 23, 31, 49, 8),List((19,19), (18,18), (17,17),
                                                  //|  (16,16), (15,15), (14,14), (13,13), (12,12), (11,11), (10,10), (9,9), (8,8
                                                  //| ), (7,7), (6,6), (5,5), (4,4), (3,3), (2,2), (1,1), (0,0)))
 mat.getAllCoords                                 //> res7: List[(Int, Int)] = List((0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0,
                                                  //| 6), (0,7), (0,8), (0,9), (0,10), (0,11), (0,12), (0,13), (0,14), (0,15), (0
                                                  //| ,16), (0,17), (0,18), (0,19), (1,0), (1,1), (1,2), (1,3), (1,4), (1,5), (1,
                                                  //| 6), (1,7), (1,8), (1,9), (1,10), (1,11), (1,12), (1,13), (1,14), (1,15), (1
                                                  //| ,16), (1,17), (1,18), (1,19), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,
                                                  //| 6), (2,7), (2,8), (2,9), (2,10), (2,11), (2,12), (2,13), (2,14), (2,15), (2
                                                  //| ,16), (2,17), (2,18), (2,19), (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,
                                                  //| 6), (3,7), (3,8), (3,9), (3,10), (3,11), (3,12), (3,13), (3,14), (3,15), (3
                                                  //| ,16), (3,17), (3,18), (3,19), (4,0), (4,1), (4,2), (4,3), (4,4), (4,5), (4,
                                                  //| 6), (4,7), (4,8), (4,9), (4,10), (4,11), (4,12), (4,13), (4,14), (4,15), (4
                                                  //| ,16), (4,17), (4,18), (4,19), (5,0), (5,1), (5,2), (5,3), (5,4), (5,5), (5,
                                                  //| 6), (5,7), (5,8), (5,9), (5,10), (5,11), (5,12), (5,13), (5,14), (5,15), (5
                                                  //| ,16), (5,17), (5,18), (
                                                  //| Output exceeds cutoff limit.
 mat.getAllRows                                   //> res8: List[List[Int]] = List(List(8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5,
                                                  //|  7, 78, 52, 12, 50, 77, 91, 8), List(49, 49, 99, 40, 17, 81, 18, 57, 60, 87
                                                  //| , 17, 40, 98, 43, 69, 48, 4, 56, 62, 0), List(81, 49, 31, 73, 55, 79, 14, 2
                                                  //| 9, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65), List(52, 70, 95, 23, 4, 
                                                  //| 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91), List(22, 31, 16,
                                                  //|  71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80), List(
                                                  //| 24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 5
                                                  //| 0), List(32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18
                                                  //| , 38, 64, 70), List(67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 4
                                                  //| 0, 91, 66, 49, 94, 21), List(24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78,
                                                  //|  96, 83, 14, 88, 34, 89, 63, 72), List(21, 36, 23, 9, 75, 0, 76, 44, 20, 45
                                                  //| , 35, 14, 0, 61, 33, 97, 34, 31, 33, 95), List(78, 17, 53, 28, 22, 75, 31, 
                                                  //| 67, 15, 94, 3, 80, 4, 6
                                                  //| Output exceeds cutoff limit.
 mat.getAllColumns                                //> res9: List[List[Int]] = List(List(8, 49, 81, 52, 22, 24, 32, 67, 24, 21, 78
                                                  //| , 16, 86, 19, 4, 88, 4, 20, 20, 1), List(2, 49, 49, 70, 31, 47, 98, 26, 55,
                                                  //|  36, 17, 39, 56, 80, 52, 36, 42, 69, 73, 70), List(22, 99, 31, 95, 16, 32, 
                                                  //| 81, 20, 58, 23, 53, 5, 0, 81, 8, 68, 16, 36, 35, 54), List(97, 40, 73, 23, 
                                                  //| 71, 60, 28, 68, 5, 9, 28, 42, 48, 68, 83, 87, 73, 41, 29, 71), List(38, 17,
                                                  //|  55, 4, 51, 99, 64, 2, 66, 75, 22, 96, 35, 5, 97, 57, 38, 72, 78, 83), List
                                                  //| (15, 81, 79, 60, 67, 3, 23, 62, 73, 0, 75, 35, 71, 94, 35, 62, 25, 30, 31, 
                                                  //| 51), List(0, 18, 14, 11, 63, 45, 67, 12, 99, 76, 31, 31, 89, 47, 99, 20, 39
                                                  //| , 23, 90, 54), List(40, 57, 29, 42, 89, 2, 10, 20, 26, 44, 67, 47, 7, 69, 1
                                                  //| 6, 72, 11, 88, 1, 69), List(0, 60, 93, 69, 41, 44, 26, 95, 97, 20, 15, 55, 
                                                  //| 5, 28, 7, 3, 24, 34, 74, 16), List(75, 87, 71, 24, 92, 75, 38, 63, 17, 45, 
                                                  //| 94, 58, 44, 73, 97, 46, 94, 62, 31, 92), List(4, 17, 40, 68, 36, 33, 40, 94
                                                  //| , 78, 35, 3, 88, 44, 92
                                                  //| Output exceeds cutoff limit.
 mat.diagonalScan.filter(_.size > 3)              //> res10: List[List[Int]] = List(List(71, 35, 69, 4), List(83, 29, 36, 42, 88)
                                                  //| , List(51, 78, 41, 16, 36, 4), List(54, 31, 72, 73, 68, 52, 19), List(69, 9
                                                  //| 0, 30, 38, 87, 8, 80, 86), List(16, 1, 23, 25, 57, 83, 81, 56, 16), List(92
                                                  //| , 74, 88, 39, 62, 97, 68, 0, 39, 78), List(33, 31, 34, 11, 20, 35, 5, 48, 5
                                                  //| , 17, 21), List(48, 49, 62, 24, 72, 99, 94, 35, 42, 53, 36, 24), List(61, 7
                                                  //| 1, 99, 94, 3, 16, 47, 71, 96, 28, 23, 55, 67), List(43, 48, 69, 72, 46, 7, 
                                                  //| 69, 89, 35, 22, 9, 58, 26, 32), List(52, 86, 82, 18, 33, 97, 28, 7, 31, 75,
                                                  //|  75, 5, 20, 98, 24), List(1, 81, 67, 8, 67, 57, 73, 5, 47, 31, 0, 66, 68, 8
                                                  //| 1, 47, 22), List(89, 16, 59, 46, 46, 32, 92, 44, 55, 67, 76, 73, 2, 28, 32,
                                                  //|  31, 52), List(19, 23, 85, 29, 55, 16, 13, 44, 58, 15, 44, 99, 62, 64, 60, 
                                                  //| 16, 70, 81), List(67, 57, 74, 32, 12, 26, 86, 37, 88, 94, 20, 26, 12, 23, 9
                                                  //| 9, 71, 95, 49, 49), List(91, 36, 56, 50), List(80, 36, 13, 4, 12), List(50,
                                                  //|  13, 2, 49, 48, 52), Li
                                                  //| Output exceeds cutoff limit.
 mat.getReflection.diagonalScan.filter(_.size > 3)//> res11: List[List[Int]] = List(List(89, 57, 36, 36), List(1, 23, 4, 76, 69),
                                                  //|  List(52, 16, 74, 62, 53, 66), List(43, 81, 85, 40, 93, 98, 40), List(61, 8
                                                  //| 6, 59, 32, 63, 27, 55, 58), List(48, 48, 67, 29, 32, 33, 89, 17, 57), List(
                                                  //| 33, 71, 82, 46, 12, 79, 4, 54, 85, 92), List(92, 49, 69, 8, 55, 26, 77, 51,
                                                  //|  29, 56, 95), List(16, 31, 99, 18, 46, 26, 17, 58, 36, 53, 33, 72), List(69
                                                  //| , 74, 62, 72, 67, 16, 52, 21, 24, 9, 31, 63, 21), List(54, 1, 34, 94, 33, 3
                                                  //| 2, 86, 60, 54, 14, 34, 89, 94, 70), List(51, 90, 88, 24, 46, 57, 13, 44, 17
                                                  //| , 16, 97, 34, 49, 64, 50), List(83, 31, 23, 11, 3, 97, 92, 37, 0, 62, 33, 8
                                                  //| 8, 66, 38, 12, 80), List(71, 78, 30, 39, 72, 7, 73, 44, 24, 4, 61, 14, 91, 
                                                  //| 18, 17, 13, 91), List(54, 29, 72, 25, 20, 16, 28, 44, 88, 80, 0, 83, 40, 66
                                                  //| , 35, 33, 36, 65), List(70, 35, 41, 38, 62, 99, 69, 5, 58, 3, 14, 96, 8, 70
                                                  //| , 20, 66, 2, 36, 0), List(52, 49, 99, 97), List(22, 70, 31, 40, 38), List(2
                                                  //| 4, 31, 95, 73, 17, 15),
                                                  //| Output exceeds cutoff limit.
 val longRuns = mat.getAllRows ++ mat.getAllColumns ++ mat.diagonalScan.filter(_.size > 3) ++ mat.getReflection.diagonalScan.filter(_.size > 3)
                                                  //> longRuns  : List[List[Int]] = List(List(8, 2, 22, 97, 38, 15, 0, 40, 0, 75,
                                                  //|  4, 5, 7, 78, 52, 12, 50, 77, 91, 8), List(49, 49, 99, 40, 17, 81, 18, 57, 
                                                  //| 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0), List(81, 49, 31, 73, 55, 79,
                                                  //|  14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65), List(52, 70, 95, 2
                                                  //| 3, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91), List(22, 3
                                                  //| 1, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80),
                                                  //|  List(24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17,
                                                  //|  12, 50), List(32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 
                                                  //| 66, 18, 38, 64, 70), List(67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63
                                                  //| , 8, 40, 91, 66, 49, 94, 21), List(24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 7
                                                  //| 8, 78, 96, 83, 14, 88, 34, 89, 63, 72), List(21, 36, 23, 9, 75, 0, 76, 44, 
                                                  //| 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95), List(78, 17, 53, 28, 22, 75
                                                  //| , 31, 67, 15, 94, 3, 80
                                                  //| Output exceeds cutoff limit.
 //longRuns.flatMap(_.sliding(window))//.map(_.product).max
 longRuns.map(_.sliding(window).map(_.product).max).max
                                                  //> res12: Int = 70600674
 longRuns.map(_.sliding(window).toList)           //> res13: List[List[List[Int]]] = List(List(List(8, 2, 22, 97), List(2, 22, 97
                                                  //| , 38), List(22, 97, 38, 15), List(97, 38, 15, 0), List(38, 15, 0, 40), List
                                                  //| (15, 0, 40, 0), List(0, 40, 0, 75), List(40, 0, 75, 4), List(0, 75, 4, 5), 
                                                  //| List(75, 4, 5, 7), List(4, 5, 7, 78), List(5, 7, 78, 52), List(7, 78, 52, 1
                                                  //| 2), List(78, 52, 12, 50), List(52, 12, 50, 77), List(12, 50, 77, 91), List(
                                                  //| 50, 77, 91, 8)), List(List(49, 49, 99, 40), List(49, 99, 40, 17), List(99, 
                                                  //| 40, 17, 81), List(40, 17, 81, 18), List(17, 81, 18, 57), List(81, 18, 57, 6
                                                  //| 0), List(18, 57, 60, 87), List(57, 60, 87, 17), List(60, 87, 17, 40), List(
                                                  //| 87, 17, 40, 98), List(17, 40, 98, 43), List(40, 98, 43, 69), List(98, 43, 6
                                                  //| 9, 48), List(43, 69, 48, 4), List(69, 48, 4, 56), List(48, 4, 56, 62), List
                                                  //| (4, 56, 62, 0)), List(List(81, 49, 31, 73), List(49, 31, 73, 55), List(31, 
                                                  //| 73, 55, 79), List(73, 55, 79, 14), List(55, 79, 14, 29), List(79, 14, 29, 9
                                                  //| 3), List(14, 29, 93, 71
                                                  //| Output exceeds cutoff limit.
 // split lines into groups of four
/* val lineGroups = lines.flatMap(_.sliding(window))
 // find greatest product of the line groups
 
 val line_max = ( lineGroups.map(_.product )).max
 
 // split grid into columns
 val numCols = 20
 
 val cols = ( for {
 		i <- 0 until numCols
 		line <- lines
 } yield line(i) ).grouped(20).toList
 val colGroups = cols.flatMap( _.sliding(window) )
 val col_max = ( colGroups.map(_.product) ).max
 
 // split grid into diagonals
 		*/
}